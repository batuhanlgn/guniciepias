# ========== .github/workflows/realtime-gip-update.yml ==========
# Bu dosyayı repo'na ekle

name: Real-time GIP Data Collection
on:
  # Her dakika çalış (GitHub'ın minimum limiti)
  schedule:
    - cron: '* * * * *'  # Her dakika
  # Manuel tetikleme için
  workflow_dispatch:
  # Push olduğunda da çalış
  push:
    branches: [ main, master ]

jobs:
  collect-data:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # 5 dakika timeout
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        pip install requests pandas sqlite3 python-dotenv openpyxl
        
    - name: Collect GIP data for 50 seconds
      run: |
        python -c "
import time
import requests
import pandas as pd
import sqlite3
import os
from datetime import datetime
import json

print('🚀 Starting 50-second data collection...')

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    'Accept': 'application/json',
    'Connection': 'keep-alive'
}

db_path = 'data/gip_live.db'
csv_path = 'boardinfo_history.csv'

# Create data directory if not exists
os.makedirs('data', exist_ok=True)

# Initialize SQLite if not exists
if not os.path.exists(db_path):
    conn = sqlite3.connect(db_path)
    conn.execute('''CREATE TABLE IF NOT EXISTS trades (
        contractName TEXT,
        price REAL,
        quantity INTEGER,
        time TEXT,
        aof_1h REAL
    )''')
    conn.close()

success_count = 0
error_count = 0

# 50 saniye boyunca her saniye veri topla
for i in range(50):
    try:
        start_time = time.time()
        print(f'⏰ Collection #{i+1}/50 - {datetime.now().strftime(\"%H:%M:%S\")}')
        
        # Board info çek
        board_url = 'https://seffaflik.epias.com.tr/electricity-service/v1/markets/gip/data/board-info'
        board_response = requests.get(board_url, headers=headers, timeout=5)
        
        # Trades çek
        trades_url = 'https://seffaflik.epias.com.tr/electricity-service/v1/markets/gip/data/trades'  
        trades_response = requests.get(trades_url, headers=headers, timeout=5)
        
        if board_response.status_code == 200 and trades_response.status_code == 200:
            # Board data'yı CSV'ye ekle
            board_data = board_response.json()
            if board_data and 'items' in board_data and board_data['items']:
                board_df = pd.DataFrame(board_data['items'])
                board_df['time'] = datetime.now().isoformat()
                
                # CSV'ye append
                if os.path.exists(csv_path):
                    board_df.to_csv(csv_path, mode='a', header=False, index=False)
                else:
                    board_df.to_csv(csv_path, mode='w', header=True, index=False)
            
            # Trades data'yı SQLite'a ekle
            trades_data = trades_response.json()
            if trades_data and 'items' in trades_data and trades_data['items']:
                trades_df = pd.DataFrame(trades_data['items'])
                trades_df['time'] = datetime.now().isoformat()
                
                # SQLite'a append
                conn = sqlite3.connect(db_path)
                trades_df.to_sql('trades', conn, if_exists='append', index=False)
                conn.close()
            
            success_count += 1
            print(f'✅ Success #{success_count}')
        else:
            error_count += 1
            print(f'❌ API Error: {board_response.status_code}, {trades_response.status_code}')
            
    except Exception as e:
        error_count += 1
        print(f'❌ Exception: {str(e)}')
    
    # 1 saniye bekle (processing time'ı çıkar)
    elapsed = time.time() - start_time
    sleep_time = max(0, 1.0 - elapsed)
    if sleep_time > 0:
        time.sleep(sleep_time)

print(f'🏁 Collection completed: {success_count} success, {error_count} errors')

# Son durumu logla
if os.path.exists(csv_path):
    csv_size = os.path.getsize(csv_path)
    print(f'📊 CSV file size: {csv_size/1024/1024:.1f} MB')

if os.path.exists(db_path):
    db_size = os.path.getsize(db_path) 
    print(f'💾 DB file size: {db_size/1024:.1f} KB')
"
        
    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions Bot"
        
        # Dosya değişikliklerini kontrol et
        if [[ $(git diff --stat) != '' ]]; then
          git add data/gip_live.db boardinfo_history.csv
          git commit -m "🤖 Auto update GIP data - $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "✅ Data committed and pushed"
        else
          echo "ℹ️ No changes to commit"
        fi
        
    - name: Update status badge
      run: |
        echo "![Last Update](https://img.shields.io/badge/Last%20Update-$(date '+%Y--%m--%d%20%H:%M:%S')-brightgreen)" > status.md
        echo "Data collection completed at $(date)" >> status.md
